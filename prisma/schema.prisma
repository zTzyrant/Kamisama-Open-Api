
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @map("_id")
  name            String
  email           String
  emailVerified   Boolean
  image           String?
  createdAt       DateTime
  updatedAt       DateTime
  username        String?
  displayUsername String?
  role            String?
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?
  sessions        Session[]
  accounts        Account[]
  members         Member[]
  invitations     Invitation[]
  Profile         Profile?
  Article         Article[]
  ArticleView     ArticleView[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  token                String
  createdAt            DateTime
  updatedAt            DateTime
  ipAddress            String?
  userAgent            String?
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy       String?
  activeOrganizationId String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id          String       @id @map("_id")
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String
  createdAt      DateTime

  @@map("member")
}

model Invitation {
  id             String       @id @map("_id")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

// ===============================================
// Model untuk Konten & Aplikasi
// ===============================================

// Menyimpan data tambahan pengguna

model Profile {
  id          String   @id @map("_id") @default(uuid())
  bio         String?
  avatar      String?
  jobs        String[]
  socials     Json[]
  nationality String?
  website     String?
  address     String?
  phone       String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Mengelompokkan artikel

model Category {
  id       String    @id @map("_id") @default(uuid())
  name     String    @unique
  slug     String    @unique
  articles Article[]
}

// Label fleksibel untuk artikel

model Tag {
  id         String    @id @map("_id") @default(uuid())
  name       String    @unique
  slug       String    @unique
  articles   Article[] @relation(fields: [articleIds], references: [id])
  articleIds String[]
}

// Entitas utama untuk konten tulisan

model ArticleStatus {
  id       String    @id @map("_id") @default(uuid())
  name     String    @unique
  slug     String    @unique
  articles Article[]
}

model Language {
  id       String    @id @map("_id") @default(uuid())
  name     String    @unique
  slug     String    @unique
  articles Article[]
}

model Article {
  id          String    @id @map("_id") @default(uuid())
  title       String
  slug        String    @unique
  content     String
  excerpt     String?
  coverImage  String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  tags       Tag[]    @relation(fields: [tagIds], references: [id])
  tagIds     String[]

  views ArticleView[]

  status     ArticleStatus @relation(fields: [statusId], references: [id])
  statusId   String
  lang       Language      @relation(fields: [langId], references: [id])
  langId     String
}

// Mencatat analitik view artikel

model ArticleView {
  id        String   @id @map("_id") @default(uuid())
  viewedAt  DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?
  viewerIp  String?
  userAgent String?
  referer   String?
}
