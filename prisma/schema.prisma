datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

model User {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    email     String    @unique
    username  String    @unique
    password  String
    roleId    String    @db.ObjectId
    role      Role      @relation(fields: [roleId], references: [id])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    tokens    Token[]
    sessions  UserSession[]
}

model IpaymuTestAccount {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    va         String
    apiKey     String
    websiteURL String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    deletedAt  DateTime?
}

model Token {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    token     String
    jti       String   @unique // Unique ID for the refresh token
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    isRevoked Boolean  @default(false)
    expiresAt DateTime
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    session   UserSession? // Add this line
}

model RevokedAccessToken {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    jti       String   @unique
    expiresAt DateTime
    createdAt DateTime @default(now())
}

model UserSession {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    tokenId   String   @unique @db.ObjectId
    token     Token    @relation(fields: [tokenId], references: [id], onDelete: Cascade)
    device    String
    deviceId  String?
    ip        String?
    lat       Float?
    long      Float?
    createdAt DateTime @default(now())
    expiresAt DateTime

    @@index([userId])
}

model Role {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String @unique
    description String?
    users       User[]
}